// <auto-generated />
using System;
using Entity2;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Entity2.Migrations
{
    [DbContext(typeof(BikeARContext))]
    [Migration("20230627084609_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Entity2.Bike", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Battery")
                        .HasColumnType("int")
                        .HasColumnName("battery");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("DateStart")
                        .HasColumnType("date");

                    b.Property<int?>("IdStation")
                        .HasColumnType("int")
                        .HasColumnName("idStation");

                    b.HasKey("Id");

                    b.HasIndex("IdStation");

                    b.ToTable("bike", (string)null);
                });

            modelBuilder.Entity("Entity2.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("address");

                    b.Property<DateTime?>("DateBirth")
                        .HasColumnType("date")
                        .HasColumnName("dateBirth");

                    b.Property<bool>("IsManager")
                        .HasColumnType("bit")
                        .HasColumnName("isManager");

                    b.Property<string>("Mail")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("mail");

                    b.Property<string>("Name")
                        .HasMaxLength(20)
                        .HasColumnType("nchar(20)")
                        .HasColumnName("name")
                        .IsFixedLength();

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("password")
                        .IsFixedLength();

                    b.Property<string>("Phon")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("phon")
                        .IsFixedLength();

                    b.Property<string>("Pic")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nchar(50)")
                        .HasColumnName("pic")
                        .IsFixedLength();

                    b.Property<bool>("ReadTerms")
                        .HasColumnType("bit")
                        .HasColumnName("readTerms");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.Property<string>("Toun")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("toun");

                    b.Property<string>("Tz")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)")
                        .HasColumnName("tz");

                    b.HasKey("Id");

                    b.ToTable("customers", (string)null);
                });

            modelBuilder.Entity("Entity2.Opinion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Caption")
                        .HasMaxLength(100)
                        .HasColumnType("nchar(100)")
                        .HasColumnName("caption")
                        .IsFixedLength();

                    b.Property<int?>("IdCust")
                        .HasColumnType("int")
                        .HasColumnName("idCust");

                    b.Property<int?>("IdStation")
                        .HasColumnType("int")
                        .HasColumnName("idStation");

                    b.Property<int?>("SatisfactionLeve")
                        .HasColumnType("int")
                        .HasColumnName("satisfactionLeve");

                    b.HasKey("Id");

                    b.HasIndex("IdStation");

                    b.ToTable("opinion", (string)null);
                });

            modelBuilder.Entity("Entity2.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("code")
                        .IsFixedLength();

                    b.Property<DateTime?>("DatePay")
                        .HasColumnType("date")
                        .HasColumnName("datePay");

                    b.Property<int?>("EndSum")
                        .HasColumnType("int")
                        .HasColumnName("endSum");

                    b.Property<int?>("IdCust")
                        .HasColumnType("int")
                        .HasColumnName("idCust");

                    b.Property<bool?>("IsPay")
                        .HasColumnType("bit")
                        .HasColumnName("isPay");

                    b.HasKey("Id");

                    b.HasIndex("IdCust");

                    b.ToTable("orders", (string)null);
                });

            modelBuilder.Entity("Entity2.OrderBike", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnType("date")
                        .HasColumnName("dateEnd");

                    b.Property<DateTime?>("DateOrder")
                        .HasColumnType("date")
                        .HasColumnName("dateOrder");

                    b.Property<DateTime?>("DateStart")
                        .HasColumnType("date")
                        .HasColumnName("dateStart");

                    b.Property<int?>("IdBike")
                        .HasColumnType("int")
                        .HasColumnName("idBike");

                    b.Property<int?>("IdPay")
                        .HasColumnType("int")
                        .HasColumnName("idPay");

                    b.Property<int?>("IdStation")
                        .HasColumnType("int")
                        .HasColumnName("idStation");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.Property<int?>("Sum")
                        .HasColumnType("int")
                        .HasColumnName("sum");

                    b.HasKey("Id");

                    b.HasIndex("IdPay");

                    b.HasIndex("IdStation");

                    b.ToTable("order_bike", (string)null);
                });

            modelBuilder.Entity("Entity2.Station", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Location")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("location");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<bool>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.ToTable("stations", (string)null);
                });

            modelBuilder.Entity("Entity2.Bike", b =>
                {
                    b.HasOne("Entity2.Station", "IdStationNavigation")
                        .WithMany("Bikes")
                        .HasForeignKey("IdStation")
                        .HasConstraintName("FK_bike_stations");

                    b.Navigation("IdStationNavigation");
                });

            modelBuilder.Entity("Entity2.Opinion", b =>
                {
                    b.HasOne("Entity2.Customer", "IdNavigation")
                        .WithOne("Opinion")
                        .HasForeignKey("Entity2.Opinion", "Id")
                        .IsRequired()
                        .HasConstraintName("FK_opinion_customers");

                    b.HasOne("Entity2.Station", "IdStationNavigation")
                        .WithMany("Opinions")
                        .HasForeignKey("IdStation")
                        .HasConstraintName("FK_opinion_stations");

                    b.Navigation("IdNavigation");

                    b.Navigation("IdStationNavigation");
                });

            modelBuilder.Entity("Entity2.Order", b =>
                {
                    b.HasOne("Entity2.Customer", "IdCustNavigation")
                        .WithMany("Orders")
                        .HasForeignKey("IdCust")
                        .HasConstraintName("FK_orders_orders");

                    b.Navigation("IdCustNavigation");
                });

            modelBuilder.Entity("Entity2.OrderBike", b =>
                {
                    b.HasOne("Entity2.Bike", "IdNavigation")
                        .WithOne("OrderBike")
                        .HasForeignKey("Entity2.OrderBike", "Id")
                        .IsRequired()
                        .HasConstraintName("FK_order_bike_bike");

                    b.HasOne("Entity2.Order", "IdPayNavigation")
                        .WithMany("OrderBikes")
                        .HasForeignKey("IdPay")
                        .HasConstraintName("FK_order_bike_orders");

                    b.HasOne("Entity2.Station", "IdStationNavigation")
                        .WithMany("OrderBikes")
                        .HasForeignKey("IdStation")
                        .HasConstraintName("FK_order_bike_stations");

                    b.Navigation("IdNavigation");

                    b.Navigation("IdPayNavigation");

                    b.Navigation("IdStationNavigation");
                });

            modelBuilder.Entity("Entity2.Bike", b =>
                {
                    b.Navigation("OrderBike");
                });

            modelBuilder.Entity("Entity2.Customer", b =>
                {
                    b.Navigation("Opinion");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Entity2.Order", b =>
                {
                    b.Navigation("OrderBikes");
                });

            modelBuilder.Entity("Entity2.Station", b =>
                {
                    b.Navigation("Bikes");

                    b.Navigation("Opinions");

                    b.Navigation("OrderBikes");
                });
#pragma warning restore 612, 618
        }
    }
}
